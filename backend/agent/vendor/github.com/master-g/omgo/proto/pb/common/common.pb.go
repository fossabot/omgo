// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	RspHeader
	UserBasicInfo
	NetworkConfig
	AppConfig
	LoginRsp
	C2SGetSeedReq
	S2CGetSeedRsp
	C2SLoginReq
	S2CLoginRsp
	S2CKickNotify
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// commands
// S -> C : even
// C -> S : odd
type Cmd int32

const (
	Cmd_RESERVED       Cmd = 0
	Cmd_HEART_BEAT_REQ Cmd = 1
	Cmd_HEART_BEAT_RSP Cmd = 2
	Cmd_KICK_NOTIFY    Cmd = 4
	Cmd_GET_SEED_REQ   Cmd = 17
	Cmd_GET_SEED_RSP   Cmd = 18
	Cmd_LOGIN_REQ      Cmd = 33
	Cmd_LOGIN_RSP      Cmd = 34
	Cmd_LOGOUT_REQ     Cmd = 51
	Cmd_LOGOUT_RSP     Cmd = 52
	Cmd_OFFLINE_REQ    Cmd = 135
	Cmd_PING_REQ       Cmd = 4097
	Cmd_PING_RSP       Cmd = 4098
	Cmd_CMD_COMMON_END Cmd = 65536
)

var Cmd_name = map[int32]string{
	0:     "RESERVED",
	1:     "HEART_BEAT_REQ",
	2:     "HEART_BEAT_RSP",
	4:     "KICK_NOTIFY",
	17:    "GET_SEED_REQ",
	18:    "GET_SEED_RSP",
	33:    "LOGIN_REQ",
	34:    "LOGIN_RSP",
	51:    "LOGOUT_REQ",
	52:    "LOGOUT_RSP",
	135:   "OFFLINE_REQ",
	4097:  "PING_REQ",
	4098:  "PING_RSP",
	65536: "CMD_COMMON_END",
}
var Cmd_value = map[string]int32{
	"RESERVED":       0,
	"HEART_BEAT_REQ": 1,
	"HEART_BEAT_RSP": 2,
	"KICK_NOTIFY":    4,
	"GET_SEED_REQ":   17,
	"GET_SEED_RSP":   18,
	"LOGIN_REQ":      33,
	"LOGIN_RSP":      34,
	"LOGOUT_REQ":     51,
	"LOGOUT_RSP":     52,
	"OFFLINE_REQ":    135,
	"PING_REQ":       4097,
	"PING_RSP":       4098,
	"CMD_COMMON_END": 65536,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResultCode int32

const (
	ResultCode_RESULT_OK             ResultCode = 0
	ResultCode_RESULT_TIMEOUT        ResultCode = 1
	ResultCode_RESULT_UNAUTH         ResultCode = 2
	ResultCode_RESULT_UNKNOWN_CMD    ResultCode = 3
	ResultCode_RESULT_INVALID        ResultCode = 4
	ResultCode_RESULT_INTERNAL_ERROR ResultCode = 5
)

var ResultCode_name = map[int32]string{
	0: "RESULT_OK",
	1: "RESULT_TIMEOUT",
	2: "RESULT_UNAUTH",
	3: "RESULT_UNKNOWN_CMD",
	4: "RESULT_INVALID",
	5: "RESULT_INTERNAL_ERROR",
}
var ResultCode_value = map[string]int32{
	"RESULT_OK":             0,
	"RESULT_TIMEOUT":        1,
	"RESULT_UNAUTH":         2,
	"RESULT_UNKNOWN_CMD":    3,
	"RESULT_INVALID":        4,
	"RESULT_INTERNAL_ERROR": 5,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}
func (ResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Gender int32

const (
	Gender_GENDER_UNKNOWN Gender = 0
	Gender_GENDER_FEMALE  Gender = 1
	Gender_GENDER_MALE    Gender = 2
)

var Gender_name = map[int32]string{
	0: "GENDER_UNKNOWN",
	1: "GENDER_FEMALE",
	2: "GENDER_MALE",
}
var Gender_value = map[string]int32{
	"GENDER_UNKNOWN": 0,
	"GENDER_FEMALE":  1,
	"GENDER_MALE":    2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type KickReason int32

const (
	KickReason_KICK_NO_REASON         KickReason = 0
	KickReason_KICK_LOGIN_ELSEWHERE   KickReason = 1
	KickReason_KICK_SESSION_EXPIRED   KickReason = 2
	KickReason_KICK_ILLEGAL_OPERATION KickReason = 3
	KickReason_KICK_BANNED            KickReason = 4
)

var KickReason_name = map[int32]string{
	0: "KICK_NO_REASON",
	1: "KICK_LOGIN_ELSEWHERE",
	2: "KICK_SESSION_EXPIRED",
	3: "KICK_ILLEGAL_OPERATION",
	4: "KICK_BANNED",
}
var KickReason_value = map[string]int32{
	"KICK_NO_REASON":         0,
	"KICK_LOGIN_ELSEWHERE":   1,
	"KICK_SESSION_EXPIRED":   2,
	"KICK_ILLEGAL_OPERATION": 3,
	"KICK_BANNED":            4,
}

func (x KickReason) String() string {
	return proto.EnumName(KickReason_name, int32(x))
}
func (KickReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RspHeader struct {
	Status    int32  `protobuf:"varint,1,opt,name=status" json:"status"`
	Timestamp uint64 `protobuf:"fixed64,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *RspHeader) Reset()                    { *m = RspHeader{} }
func (m *RspHeader) String() string            { return proto.CompactTextString(m) }
func (*RspHeader) ProtoMessage()               {}
func (*RspHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RspHeader) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RspHeader) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RspHeader) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UserBasicInfo struct {
	Usn       uint64 `protobuf:"fixed64,1,opt,name=usn" json:"usn,omitempty"`
	Uid       uint64 `protobuf:"varint,2,opt,name=uid" json:"uid"`
	Birthday  uint64 `protobuf:"fixed64,3,opt,name=birthday" json:"birthday,omitempty"`
	Gender    Gender `protobuf:"varint,4,opt,name=gender,enum=proto.common.Gender" json:"gender"`
	Nickname  string `protobuf:"bytes,5,opt,name=nickname" json:"nickname,omitempty"`
	Email     string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Avatar    string `protobuf:"bytes,7,opt,name=avatar" json:"avatar,omitempty"`
	Country   string `protobuf:"bytes,8,opt,name=country" json:"country,omitempty"`
	Since     uint64 `protobuf:"fixed64,9,opt,name=since" json:"since,omitempty"`
	LastLogin uint64 `protobuf:"fixed64,10,opt,name=last_login,json=lastLogin" json:"last_login,omitempty"`
}

func (m *UserBasicInfo) Reset()                    { *m = UserBasicInfo{} }
func (m *UserBasicInfo) String() string            { return proto.CompactTextString(m) }
func (*UserBasicInfo) ProtoMessage()               {}
func (*UserBasicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserBasicInfo) GetUsn() uint64 {
	if m != nil {
		return m.Usn
	}
	return 0
}

func (m *UserBasicInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserBasicInfo) GetBirthday() uint64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UserBasicInfo) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_GENDER_UNKNOWN
}

func (m *UserBasicInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserBasicInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserBasicInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserBasicInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserBasicInfo) GetSince() uint64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *UserBasicInfo) GetLastLogin() uint64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

type NetworkConfig struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,4,opt,name=port" json:"port"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NetworkConfig) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NetworkConfig) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *NetworkConfig) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *NetworkConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AppConfig struct {
	NetworkCfg []*NetworkConfig `protobuf:"bytes,1,rep,name=network_cfg,json=networkCfg" json:"network_cfg,omitempty"`
}

func (m *AppConfig) Reset()                    { *m = AppConfig{} }
func (m *AppConfig) String() string            { return proto.CompactTextString(m) }
func (*AppConfig) ProtoMessage()               {}
func (*AppConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppConfig) GetNetworkCfg() []*NetworkConfig {
	if m != nil {
		return m.NetworkCfg
	}
	return nil
}

type LoginRsp struct {
	Header   *RspHeader     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Token    string         `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Config   *AppConfig     `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	UserInfo *UserBasicInfo `protobuf:"bytes,4,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
}

func (m *LoginRsp) Reset()                    { *m = LoginRsp{} }
func (m *LoginRsp) String() string            { return proto.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()               {}
func (*LoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginRsp) GetHeader() *RspHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LoginRsp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginRsp) GetConfig() *AppConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *LoginRsp) GetUserInfo() *UserBasicInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type C2SGetSeedReq struct {
	SendSeed []byte `protobuf:"bytes,1,opt,name=send_seed,json=sendSeed,proto3" json:"send_seed,omitempty"`
	RecvSeed []byte `protobuf:"bytes,2,opt,name=recv_seed,json=recvSeed,proto3" json:"recv_seed,omitempty"`
}

func (m *C2SGetSeedReq) Reset()                    { *m = C2SGetSeedReq{} }
func (m *C2SGetSeedReq) String() string            { return proto.CompactTextString(m) }
func (*C2SGetSeedReq) ProtoMessage()               {}
func (*C2SGetSeedReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *C2SGetSeedReq) GetSendSeed() []byte {
	if m != nil {
		return m.SendSeed
	}
	return nil
}

func (m *C2SGetSeedReq) GetRecvSeed() []byte {
	if m != nil {
		return m.RecvSeed
	}
	return nil
}

type S2CGetSeedRsp struct {
	Header   *RspHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	SendSeed []byte     `protobuf:"bytes,2,opt,name=send_seed,json=sendSeed,proto3" json:"send_seed,omitempty"`
	RecvSeed []byte     `protobuf:"bytes,3,opt,name=recv_seed,json=recvSeed,proto3" json:"recv_seed,omitempty"`
}

func (m *S2CGetSeedRsp) Reset()                    { *m = S2CGetSeedRsp{} }
func (m *S2CGetSeedRsp) String() string            { return proto.CompactTextString(m) }
func (*S2CGetSeedRsp) ProtoMessage()               {}
func (*S2CGetSeedRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *S2CGetSeedRsp) GetHeader() *RspHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *S2CGetSeedRsp) GetSendSeed() []byte {
	if m != nil {
		return m.SendSeed
	}
	return nil
}

func (m *S2CGetSeedRsp) GetRecvSeed() []byte {
	if m != nil {
		return m.RecvSeed
	}
	return nil
}

type C2SLoginReq struct {
	Timestamp uint64 `protobuf:"fixed64,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Usn       uint64 `protobuf:"fixed64,2,opt,name=usn" json:"usn,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *C2SLoginReq) Reset()                    { *m = C2SLoginReq{} }
func (m *C2SLoginReq) String() string            { return proto.CompactTextString(m) }
func (*C2SLoginReq) ProtoMessage()               {}
func (*C2SLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *C2SLoginReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *C2SLoginReq) GetUsn() uint64 {
	if m != nil {
		return m.Usn
	}
	return 0
}

func (m *C2SLoginReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type S2CLoginRsp struct {
	Header *RspHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *S2CLoginRsp) Reset()                    { *m = S2CLoginRsp{} }
func (m *S2CLoginRsp) String() string            { return proto.CompactTextString(m) }
func (*S2CLoginRsp) ProtoMessage()               {}
func (*S2CLoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *S2CLoginRsp) GetHeader() *RspHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type S2CKickNotify struct {
	Timestamp uint64     `protobuf:"fixed64,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Reason    KickReason `protobuf:"varint,2,opt,name=reason,enum=proto.common.KickReason" json:"reason"`
	Msg       string     `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *S2CKickNotify) Reset()                    { *m = S2CKickNotify{} }
func (m *S2CKickNotify) String() string            { return proto.CompactTextString(m) }
func (*S2CKickNotify) ProtoMessage()               {}
func (*S2CKickNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *S2CKickNotify) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *S2CKickNotify) GetReason() KickReason {
	if m != nil {
		return m.Reason
	}
	return KickReason_KICK_NO_REASON
}

func (m *S2CKickNotify) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*RspHeader)(nil), "proto.common.RspHeader")
	proto.RegisterType((*UserBasicInfo)(nil), "proto.common.UserBasicInfo")
	proto.RegisterType((*NetworkConfig)(nil), "proto.common.NetworkConfig")
	proto.RegisterType((*AppConfig)(nil), "proto.common.AppConfig")
	proto.RegisterType((*LoginRsp)(nil), "proto.common.LoginRsp")
	proto.RegisterType((*C2SGetSeedReq)(nil), "proto.common.C2SGetSeedReq")
	proto.RegisterType((*S2CGetSeedRsp)(nil), "proto.common.S2CGetSeedRsp")
	proto.RegisterType((*C2SLoginReq)(nil), "proto.common.C2SLoginReq")
	proto.RegisterType((*S2CLoginRsp)(nil), "proto.common.S2CLoginRsp")
	proto.RegisterType((*S2CKickNotify)(nil), "proto.common.S2CKickNotify")
	proto.RegisterEnum("proto.common.Cmd", Cmd_name, Cmd_value)
	proto.RegisterEnum("proto.common.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterEnum("proto.common.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("proto.common.KickReason", KickReason_name, KickReason_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x3b, 0x69, 0x36, 0x39, 0x69, 0xc2, 0xec, 0xa8, 0x14, 0xb3, 0x0b, 0x52, 0xc8, 0x55,
	0x54, 0x41, 0x83, 0xb2, 0x5c, 0x70, 0x81, 0x10, 0xae, 0x33, 0x4d, 0xad, 0x3a, 0x76, 0x98, 0x49,
	0xb6, 0xc0, 0x8d, 0xe5, 0xda, 0x93, 0xd4, 0x6a, 0xfd, 0x53, 0xdb, 0x59, 0x54, 0xae, 0x76, 0xb9,
	0x41, 0xbc, 0x00, 0x4f, 0xc3, 0x63, 0xf1, 0x00, 0x68, 0xc6, 0x6e, 0x9a, 0x6c, 0x11, 0x2b, 0xed,
	0x55, 0xe6, 0xfb, 0xce, 0xf1, 0x77, 0xce, 0xf9, 0xce, 0x4c, 0x60, 0xdf, 0x4f, 0xa2, 0x28, 0x89,
	0x8f, 0xd3, 0x2c, 0x29, 0x12, 0xbc, 0x2f, 0x7f, 0x8e, 0x4b, 0xae, 0xcf, 0xa0, 0x45, 0xf3, 0xf4,
	0x8c, 0x7b, 0x01, 0xcf, 0xf0, 0x21, 0x34, 0xf2, 0xc2, 0x2b, 0xd6, 0xb9, 0xa6, 0xf4, 0x94, 0xc1,
	0x1e, 0xad, 0x10, 0xfe, 0x0c, 0x5a, 0x45, 0x18, 0xf1, 0xbc, 0xf0, 0xa2, 0x54, 0x53, 0x7b, 0xca,
	0xa0, 0x41, 0x1f, 0x08, 0x8c, 0xa0, 0x16, 0xe5, 0x2b, 0xad, 0xd6, 0x53, 0x06, 0x2d, 0x2a, 0x8e,
	0xfd, 0xbf, 0x54, 0xe8, 0x2c, 0x72, 0x9e, 0x9d, 0x78, 0x79, 0xe8, 0x9b, 0xf1, 0x32, 0x11, 0x39,
	0xeb, 0x3c, 0x96, 0xb2, 0x0d, 0x2a, 0x8e, 0x92, 0x09, 0x03, 0xa9, 0x56, 0xa7, 0xe2, 0x88, 0x9f,
	0x43, 0xf3, 0x32, 0xcc, 0x8a, 0xab, 0xc0, 0xbb, 0x93, 0x62, 0x0d, 0xba, 0xc1, 0xf8, 0x4b, 0x68,
	0xac, 0x78, 0x1c, 0xf0, 0x4c, 0xab, 0xf7, 0x94, 0x41, 0x77, 0x74, 0x70, 0xbc, 0x3d, 0xc5, 0xf1,
	0x44, 0xc6, 0x68, 0x95, 0x23, 0x94, 0xe2, 0xd0, 0xbf, 0x8e, 0xbd, 0x88, 0x6b, 0x7b, 0xb2, 0xad,
	0x0d, 0xc6, 0x07, 0xb0, 0xc7, 0x23, 0x2f, 0xbc, 0xd1, 0x1a, 0x32, 0x50, 0x02, 0x31, 0xb9, 0xf7,
	0xda, 0x2b, 0xbc, 0x4c, 0x7b, 0x2a, 0xe9, 0x0a, 0x61, 0x0d, 0x9e, 0xfa, 0xc9, 0x3a, 0x2e, 0xb2,
	0x3b, 0xad, 0x29, 0x03, 0xf7, 0x50, 0xe8, 0xe4, 0x61, 0xec, 0x73, 0xad, 0x25, 0x5b, 0x2d, 0x01,
	0xfe, 0x1c, 0xe0, 0xc6, 0xcb, 0x0b, 0xf7, 0x26, 0x59, 0x85, 0xb1, 0x06, 0xa5, 0x55, 0x82, 0xb1,
	0x04, 0xd1, 0xbf, 0x80, 0x8e, 0xcd, 0x8b, 0x5f, 0x93, 0xec, 0xda, 0x48, 0xe2, 0x65, 0xb8, 0xc2,
	0x5d, 0x50, 0xc3, 0xa0, 0x72, 0x5b, 0x0d, 0x03, 0x8c, 0xa1, 0x1e, 0xf0, 0xdc, 0x97, 0xb6, 0xb4,
	0xa8, 0x3c, 0xcb, 0x9c, 0xb4, 0xb2, 0x57, 0x0d, 0x53, 0x91, 0x93, 0x26, 0x59, 0x21, 0x9d, 0xd8,
	0xa3, 0xf2, 0xdc, 0x37, 0xa1, 0xa5, 0xa7, 0x69, 0x25, 0xfa, 0x1d, 0xb4, 0xe3, 0xb2, 0x8a, 0xeb,
	0x2f, 0x57, 0x9a, 0xd2, 0xab, 0x0d, 0xda, 0xa3, 0x17, 0xbb, 0x8e, 0xed, 0xb4, 0x41, 0xa1, 0xca,
	0x37, 0x96, 0xab, 0xfe, 0xdf, 0x0a, 0x34, 0x65, 0xb7, 0x34, 0x4f, 0xf1, 0x10, 0x1a, 0x57, 0xf2,
	0x6e, 0xc8, 0x1e, 0xdb, 0xa3, 0x4f, 0x76, 0x55, 0x36, 0x57, 0x87, 0x56, 0x69, 0xc2, 0x96, 0x22,
	0xb9, 0xe6, 0x71, 0x35, 0x41, 0x09, 0x84, 0x8c, 0x2f, 0x2b, 0xc9, 0x31, 0x1e, 0xc9, 0x6c, 0x5a,
	0xa7, 0x55, 0x1a, 0xfe, 0x16, 0x5a, 0xeb, 0x9c, 0x67, 0x6e, 0x18, 0x2f, 0x13, 0x39, 0xe8, 0xa3,
	0x01, 0x76, 0xee, 0x17, 0x6d, 0x8a, 0x6c, 0x71, 0xea, 0x9b, 0xd0, 0x31, 0x46, 0x6c, 0xc2, 0x0b,
	0xc6, 0x79, 0x40, 0xf9, 0x2d, 0x7e, 0x01, 0xad, 0x9c, 0xc7, 0x81, 0x9b, 0x73, 0x5e, 0x3a, 0xbd,
	0x4f, 0x9b, 0x82, 0x10, 0x71, 0x11, 0xcc, 0xb8, 0xff, 0xba, 0x0c, 0xaa, 0x65, 0x50, 0x10, 0x22,
	0xd8, 0xff, 0x0d, 0x3a, 0x6c, 0x64, 0xdc, 0x4b, 0x7d, 0x88, 0x1b, 0x3b, 0xb5, 0xd5, 0xff, 0xab,
	0x5d, 0x7b, 0xa7, 0x36, 0x83, 0xb6, 0x31, 0x62, 0xe5, 0x1e, 0xf8, 0xed, 0xee, 0x0b, 0x54, 0xfe,
	0xe3, 0x05, 0x8a, 0xd7, 0xa5, 0x3e, 0xbc, 0xae, 0xcd, 0x1a, 0x6a, 0x5b, 0x6b, 0xe8, 0x7f, 0x0f,
	0x6d, 0x36, 0x32, 0x3e, 0x78, 0xb9, 0xfd, 0x5b, 0x69, 0xc8, 0x79, 0xe8, 0x5f, 0xdb, 0x49, 0x11,
	0x2e, 0xef, 0xde, 0xd3, 0xd6, 0xd7, 0xd0, 0xc8, 0xb8, 0x97, 0x27, 0x65, 0x67, 0xdd, 0x91, 0xb6,
	0xab, 0x2f, 0x74, 0xa8, 0x8c, 0xd3, 0x2a, 0xef, 0xf1, 0x5f, 0xc9, 0xd1, 0x3f, 0x0a, 0xd4, 0x8c,
	0x28, 0xc0, 0xfb, 0xd0, 0xa4, 0x84, 0x11, 0xfa, 0x8a, 0x8c, 0xd1, 0x13, 0x8c, 0xa1, 0x7b, 0x46,
	0x74, 0x3a, 0x77, 0x4f, 0x88, 0x3e, 0x77, 0x29, 0xf9, 0x11, 0x29, 0xef, 0x72, 0x6c, 0x86, 0x54,
	0xfc, 0x11, 0xb4, 0xcf, 0x4d, 0xe3, 0xdc, 0xb5, 0x9d, 0xb9, 0x79, 0xfa, 0x33, 0xaa, 0x63, 0x04,
	0xfb, 0x13, 0x32, 0x77, 0x19, 0x21, 0x63, 0xf9, 0xd9, 0xb3, 0x5d, 0x86, 0xcd, 0x10, 0xc6, 0x1d,
	0x68, 0x59, 0xce, 0xc4, 0xb4, 0x65, 0xc2, 0x17, 0x5b, 0x90, 0xcd, 0x50, 0x1f, 0x77, 0x01, 0x2c,
	0x67, 0xe2, 0x2c, 0xca, 0xb2, 0x2f, 0xb7, 0x31, 0x9b, 0xa1, 0x6f, 0x30, 0x82, 0xb6, 0x73, 0x7a,
	0x6a, 0x99, 0x36, 0x91, 0x09, 0x7f, 0x28, 0xb8, 0x03, 0xcd, 0x99, 0x69, 0x4f, 0x24, 0x7c, 0xdb,
	0x7b, 0x80, 0x6c, 0x86, 0x7e, 0xef, 0xe1, 0x03, 0xe8, 0x1a, 0xd3, 0xb1, 0x6b, 0x38, 0xd3, 0xa9,
	0x63, 0xbb, 0xc4, 0x1e, 0xa3, 0x37, 0x6f, 0xea, 0x47, 0x7f, 0x2a, 0x00, 0x94, 0xe7, 0xeb, 0x9b,
	0xc2, 0x48, 0x02, 0x2e, 0x7a, 0xa0, 0x84, 0x2d, 0xac, 0xb9, 0xeb, 0x9c, 0x97, 0xe3, 0x57, 0x70,
	0x6e, 0x4e, 0x89, 0xb3, 0x98, 0x23, 0x05, 0x3f, 0x83, 0x4e, 0xc5, 0x2d, 0x6c, 0x7d, 0x31, 0x3f,
	0x43, 0x2a, 0x3e, 0x04, 0xbc, 0xa1, 0xce, 0x6d, 0xe7, 0xc2, 0x76, 0x8d, 0xe9, 0x18, 0xd5, 0xb6,
	0x3e, 0x37, 0xed, 0x57, 0xba, 0x65, 0x8e, 0x51, 0x1d, 0x7f, 0x0a, 0x1f, 0x6f, 0xb8, 0x39, 0xa1,
	0xb6, 0x6e, 0xb9, 0x84, 0x52, 0x87, 0xa2, 0xbd, 0xa3, 0x1f, 0xa0, 0x51, 0xfe, 0xbf, 0x8a, 0x0f,
	0x27, 0xc4, 0x1e, 0x13, 0x7a, 0x2f, 0x88, 0x9e, 0x88, 0xba, 0x15, 0x77, 0x4a, 0xa6, 0xba, 0x45,
	0x90, 0x22, 0x5c, 0xaf, 0x28, 0x49, 0xa8, 0x47, 0x6f, 0x15, 0x80, 0x87, 0x6d, 0x0b, 0x99, 0x6a,
	0x2b, 0x2e, 0x25, 0x3a, 0x73, 0x84, 0x8c, 0x06, 0x07, 0x92, 0x2b, 0xad, 0x26, 0x16, 0x23, 0x17,
	0x67, 0x84, 0x0a, 0xb5, 0xfb, 0x08, 0x23, 0x8c, 0x99, 0xc2, 0xa2, 0x9f, 0x66, 0x26, 0x25, 0x63,
	0xa4, 0xe2, 0xe7, 0x70, 0x28, 0x23, 0xa6, 0x65, 0x91, 0x89, 0x6e, 0xb9, 0xce, 0x8c, 0x50, 0x7d,
	0x6e, 0x3a, 0x36, 0xaa, 0x6d, 0x36, 0x7f, 0xa2, 0xdb, 0x36, 0x19, 0xa3, 0xfa, 0xc9, 0xd1, 0x2f,
	0x83, 0x55, 0x58, 0x5c, 0xad, 0x2f, 0xc5, 0xf5, 0x1b, 0x46, 0x5e, 0x5e, 0xf0, 0xec, 0xab, 0xd5,
	0x30, 0x89, 0x56, 0xc9, 0x50, 0x5e, 0xcb, 0x61, 0x7a, 0x39, 0x2c, 0x6f, 0xe6, 0x65, 0x43, 0x12,
	0x2f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xad, 0x5d, 0x7a, 0x28, 0x39, 0x07, 0x00, 0x00,
}
