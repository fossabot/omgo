// Code generated by protoc-gen-go. DO NOT EDIT.
// source: db.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	DB
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type DB_StatusCode int32

const (
	DB_STATUS_OK                 DB_StatusCode = 0
	DB_STATUS_INVALID_PARAM      DB_StatusCode = 100
	DB_STATUS_INVALID_USN        DB_StatusCode = 101
	DB_STATUS_INVALID_UID        DB_StatusCode = 102
	DB_STATUS_INVALID_EMAIL      DB_StatusCode = 103
	DB_STATUS_INVALID_SECRET     DB_StatusCode = 104
	DB_STATUS_INVALID_TOKEN      DB_StatusCode = 105
	DB_STATUS_USER_ALREADY_EXIST DB_StatusCode = 201
	DB_STATUS_USER_NOT_FOUND     DB_StatusCode = 202
	DB_STATUS_INTERNAL_ERROR     DB_StatusCode = 500
	DB_STATUS_UNAVAILABLE        DB_StatusCode = 503
)

var DB_StatusCode_name = map[int32]string{
	0:   "STATUS_OK",
	100: "STATUS_INVALID_PARAM",
	101: "STATUS_INVALID_USN",
	102: "STATUS_INVALID_UID",
	103: "STATUS_INVALID_EMAIL",
	104: "STATUS_INVALID_SECRET",
	105: "STATUS_INVALID_TOKEN",
	201: "STATUS_USER_ALREADY_EXIST",
	202: "STATUS_USER_NOT_FOUND",
	500: "STATUS_INTERNAL_ERROR",
	503: "STATUS_UNAVAILABLE",
}
var DB_StatusCode_value = map[string]int32{
	"STATUS_OK":                 0,
	"STATUS_INVALID_PARAM":      100,
	"STATUS_INVALID_USN":        101,
	"STATUS_INVALID_UID":        102,
	"STATUS_INVALID_EMAIL":      103,
	"STATUS_INVALID_SECRET":     104,
	"STATUS_INVALID_TOKEN":      105,
	"STATUS_USER_ALREADY_EXIST": 201,
	"STATUS_USER_NOT_FOUND":     202,
	"STATUS_INTERNAL_ERROR":     500,
	"STATUS_UNAVAILABLE":        503,
}

func (x DB_StatusCode) String() string {
	return proto1.EnumName(DB_StatusCode_name, int32(x))
}
func (DB_StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type DB struct {
}

func (m *DB) Reset()                    { *m = DB{} }
func (m *DB) String() string            { return proto1.CompactTextString(m) }
func (*DB) ProtoMessage()               {}
func (*DB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DB_Result struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *DB_Result) Reset()                    { *m = DB_Result{} }
func (m *DB_Result) String() string            { return proto1.CompactTextString(m) }
func (*DB_Result) ProtoMessage()               {}
func (*DB_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *DB_Result) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DB_Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type DB_UserEntry struct {
	Usn            uint64 `protobuf:"fixed64,1,opt,name=usn" json:"usn,omitempty"`
	Uid            uint64 `protobuf:"varint,2,opt,name=uid" json:"uid"`
	AppLanguage    string `protobuf:"bytes,3,opt,name=app_language,json=appLanguage" json:"app_language,omitempty"`
	AppVersion     string `protobuf:"bytes,4,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	Avatar         string `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
	Birthday       uint64 `protobuf:"varint,6,opt,name=birthday" json:"birthday"`
	Country        string `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
	DeviceType     int32  `protobuf:"varint,8,opt,name=device_type,json=deviceType" json:"device_type"`
	Email          string `protobuf:"bytes,9,opt,name=email" json:"email,omitempty"`
	EmailVerified  bool   `protobuf:"varint,10,opt,name=email_verified,json=emailVerified" json:"email_verified"`
	Gender         int32  `protobuf:"varint,11,opt,name=gender" json:"gender"`
	IsOfficial     bool   `protobuf:"varint,12,opt,name=is_official,json=isOfficial" json:"is_official"`
	IsRobot        bool   `protobuf:"varint,13,opt,name=is_robot,json=isRobot" json:"is_robot"`
	LastIp         string `protobuf:"bytes,14,opt,name=last_ip,json=lastIp" json:"last_ip,omitempty"`
	LastLogin      uint64 `protobuf:"varint,15,opt,name=last_login,json=lastLogin" json:"last_login"`
	LoginCount     uint64 `protobuf:"varint,16,opt,name=login_count,json=loginCount" json:"login_count"`
	Mcc            int32  `protobuf:"varint,17,opt,name=mcc" json:"mcc"`
	Nickname       string `protobuf:"bytes,18,opt,name=nickname" json:"nickname,omitempty"`
	Os             string `protobuf:"bytes,19,opt,name=os" json:"os,omitempty"`
	OsLocale       string `protobuf:"bytes,20,opt,name=os_locale,json=osLocale" json:"os_locale,omitempty"`
	Phone          string `protobuf:"bytes,21,opt,name=phone" json:"phone,omitempty"`
	PhoneVerified  bool   `protobuf:"varint,22,opt,name=phone_verified,json=phoneVerified" json:"phone_verified"`
	PremiumEnd     uint64 `protobuf:"varint,23,opt,name=premium_end,json=premiumEnd" json:"premium_end"`
	PremiumExp     uint64 `protobuf:"varint,24,opt,name=premium_exp,json=premiumExp" json:"premium_exp"`
	PremiumLevel   int32  `protobuf:"varint,25,opt,name=premium_level,json=premiumLevel" json:"premium_level"`
	Secret         string `protobuf:"bytes,26,opt,name=secret" json:"secret,omitempty"`
	Since          uint64 `protobuf:"varint,27,opt,name=since" json:"since"`
	SocialId       string `protobuf:"bytes,28,opt,name=social_id,json=socialId" json:"social_id,omitempty"`
	SocialName     string `protobuf:"bytes,29,opt,name=social_name,json=socialName" json:"social_name,omitempty"`
	SocialVerified bool   `protobuf:"varint,30,opt,name=social_verified,json=socialVerified" json:"social_verified"`
	Status         int32  `protobuf:"varint,31,opt,name=status" json:"status"`
	Timezone       int32  `protobuf:"varint,32,opt,name=timezone" json:"timezone"`
	Token          string `protobuf:"bytes,33,opt,name=token" json:"token,omitempty"`
}

func (m *DB_UserEntry) Reset()                    { *m = DB_UserEntry{} }
func (m *DB_UserEntry) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserEntry) ProtoMessage()               {}
func (*DB_UserEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *DB_UserEntry) GetUsn() uint64 {
	if m != nil {
		return m.Usn
	}
	return 0
}

func (m *DB_UserEntry) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DB_UserEntry) GetAppLanguage() string {
	if m != nil {
		return m.AppLanguage
	}
	return ""
}

func (m *DB_UserEntry) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *DB_UserEntry) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *DB_UserEntry) GetBirthday() uint64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *DB_UserEntry) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *DB_UserEntry) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *DB_UserEntry) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DB_UserEntry) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *DB_UserEntry) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *DB_UserEntry) GetIsOfficial() bool {
	if m != nil {
		return m.IsOfficial
	}
	return false
}

func (m *DB_UserEntry) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *DB_UserEntry) GetLastIp() string {
	if m != nil {
		return m.LastIp
	}
	return ""
}

func (m *DB_UserEntry) GetLastLogin() uint64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

func (m *DB_UserEntry) GetLoginCount() uint64 {
	if m != nil {
		return m.LoginCount
	}
	return 0
}

func (m *DB_UserEntry) GetMcc() int32 {
	if m != nil {
		return m.Mcc
	}
	return 0
}

func (m *DB_UserEntry) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *DB_UserEntry) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *DB_UserEntry) GetOsLocale() string {
	if m != nil {
		return m.OsLocale
	}
	return ""
}

func (m *DB_UserEntry) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *DB_UserEntry) GetPhoneVerified() bool {
	if m != nil {
		return m.PhoneVerified
	}
	return false
}

func (m *DB_UserEntry) GetPremiumEnd() uint64 {
	if m != nil {
		return m.PremiumEnd
	}
	return 0
}

func (m *DB_UserEntry) GetPremiumExp() uint64 {
	if m != nil {
		return m.PremiumExp
	}
	return 0
}

func (m *DB_UserEntry) GetPremiumLevel() int32 {
	if m != nil {
		return m.PremiumLevel
	}
	return 0
}

func (m *DB_UserEntry) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *DB_UserEntry) GetSince() uint64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *DB_UserEntry) GetSocialId() string {
	if m != nil {
		return m.SocialId
	}
	return ""
}

func (m *DB_UserEntry) GetSocialName() string {
	if m != nil {
		return m.SocialName
	}
	return ""
}

func (m *DB_UserEntry) GetSocialVerified() bool {
	if m != nil {
		return m.SocialVerified
	}
	return false
}

func (m *DB_UserEntry) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DB_UserEntry) GetTimezone() int32 {
	if m != nil {
		return m.Timezone
	}
	return 0
}

func (m *DB_UserEntry) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type DB_UserLogoutRequest struct {
	Usn   uint64 `protobuf:"varint,1,opt,name=usn" json:"usn"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *DB_UserLogoutRequest) Reset()                    { *m = DB_UserLogoutRequest{} }
func (m *DB_UserLogoutRequest) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserLogoutRequest) ProtoMessage()               {}
func (*DB_UserLogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *DB_UserLogoutRequest) GetUsn() uint64 {
	if m != nil {
		return m.Usn
	}
	return 0
}

func (m *DB_UserLogoutRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// user related operation result
type DB_UserOpResult struct {
	Result *DB_Result    `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	User   *DB_UserEntry `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *DB_UserOpResult) Reset()                    { *m = DB_UserOpResult{} }
func (m *DB_UserOpResult) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserOpResult) ProtoMessage()               {}
func (*DB_UserOpResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *DB_UserOpResult) GetResult() *DB_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DB_UserOpResult) GetUser() *DB_UserEntry {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto1.RegisterType((*DB)(nil), "proto.DB")
	proto1.RegisterType((*DB_Result)(nil), "proto.DB.Result")
	proto1.RegisterType((*DB_UserEntry)(nil), "proto.DB.UserEntry")
	proto1.RegisterType((*DB_UserLogoutRequest)(nil), "proto.DB.UserLogoutRequest")
	proto1.RegisterType((*DB_UserOpResult)(nil), "proto.DB.UserOpResult")
	proto1.RegisterEnum("proto.DB_StatusCode", DB_StatusCode_name, DB_StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DBService service

type DBServiceClient interface {
	// query user info
	UserQuery(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error)
	// update user info
	UserUpdateInfo(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_Result, error)
	// register
	UserRegister(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error)
	// login
	UserLogin(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error)
	// logout
	UserLogout(ctx context.Context, in *DB_UserLogoutRequest, opts ...grpc.CallOption) (*DB_Result, error)
	// verify token
	UserExtraInfoQuery(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error)
}

type dBServiceClient struct {
	cc *grpc.ClientConn
}

func NewDBServiceClient(cc *grpc.ClientConn) DBServiceClient {
	return &dBServiceClient{cc}
}

func (c *dBServiceClient) UserQuery(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error) {
	out := new(DB_UserOpResult)
	err := grpc.Invoke(ctx, "/proto.DBService/UserQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserUpdateInfo(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_Result, error) {
	out := new(DB_Result)
	err := grpc.Invoke(ctx, "/proto.DBService/UserUpdateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserRegister(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error) {
	out := new(DB_UserOpResult)
	err := grpc.Invoke(ctx, "/proto.DBService/UserRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserLogin(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error) {
	out := new(DB_UserOpResult)
	err := grpc.Invoke(ctx, "/proto.DBService/UserLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserLogout(ctx context.Context, in *DB_UserLogoutRequest, opts ...grpc.CallOption) (*DB_Result, error) {
	out := new(DB_Result)
	err := grpc.Invoke(ctx, "/proto.DBService/UserLogout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserExtraInfoQuery(ctx context.Context, in *DB_UserEntry, opts ...grpc.CallOption) (*DB_UserOpResult, error) {
	out := new(DB_UserOpResult)
	err := grpc.Invoke(ctx, "/proto.DBService/UserExtraInfoQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBService service

type DBServiceServer interface {
	// query user info
	UserQuery(context.Context, *DB_UserEntry) (*DB_UserOpResult, error)
	// update user info
	UserUpdateInfo(context.Context, *DB_UserEntry) (*DB_Result, error)
	// register
	UserRegister(context.Context, *DB_UserEntry) (*DB_UserOpResult, error)
	// login
	UserLogin(context.Context, *DB_UserEntry) (*DB_UserOpResult, error)
	// logout
	UserLogout(context.Context, *DB_UserLogoutRequest) (*DB_Result, error)
	// verify token
	UserExtraInfoQuery(context.Context, *DB_UserEntry) (*DB_UserOpResult, error)
}

func RegisterDBServiceServer(s *grpc.Server, srv DBServiceServer) {
	s.RegisterService(&_DBService_serviceDesc, srv)
}

func _DBService_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserQuery(ctx, req.(*DB_UserEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserUpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserUpdateInfo(ctx, req.(*DB_UserEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserRegister(ctx, req.(*DB_UserEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserLogin(ctx, req.(*DB_UserEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserLogout(ctx, req.(*DB_UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserExtraInfoQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserExtraInfoQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserExtraInfoQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserExtraInfoQuery(ctx, req.(*DB_UserEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DBService",
	HandlerType: (*DBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserQuery",
			Handler:    _DBService_UserQuery_Handler,
		},
		{
			MethodName: "UserUpdateInfo",
			Handler:    _DBService_UserUpdateInfo_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _DBService_UserRegister_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _DBService_UserLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _DBService_UserLogout_Handler,
		},
		{
			MethodName: "UserExtraInfoQuery",
			Handler:    _DBService_UserExtraInfoQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

func init() { proto1.RegisterFile("db.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 898 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0x6d, 0x9c, 0xc4, 0x1f, 0xe3, 0xc4, 0xab, 0xe5, 0x66, 0x13, 0xc6, 0xe9, 0x6e, 0xb2, 0x5b,
	0x14, 0x9b, 0x53, 0x0e, 0xe9, 0xa1, 0x05, 0x72, 0x52, 0x62, 0x15, 0x10, 0x56, 0x6b, 0xb7, 0xb4,
	0x1d, 0xb4, 0x27, 0x41, 0x91, 0x68, 0x87, 0x58, 0x59, 0x54, 0x45, 0x2a, 0x88, 0xfb, 0x7f, 0x7a,
	0x29, 0xd0, 0x1f, 0xd2, 0xfe, 0x9e, 0x16, 0xbd, 0x16, 0x1c, 0x6a, 0x95, 0x78, 0xeb, 0x4b, 0x4e,
	0xe2, 0x7b, 0x6f, 0x86, 0x33, 0xf3, 0x44, 0x12, 0xda, 0xc9, 0xcd, 0x59, 0x5e, 0x48, 0x2d, 0xc9,
	0x36, 0x7e, 0xde, 0xfe, 0xd1, 0x85, 0xc6, 0xe0, 0xb2, 0x7f, 0x0e, 0x4d, 0xc6, 0x55, 0x99, 0x6a,
	0xb2, 0x0f, 0x4d, 0xa5, 0x23, 0x5d, 0x2a, 0xba, 0x71, 0xb2, 0x71, 0xba, 0xcd, 0x2a, 0x44, 0x1c,
	0xd8, 0x5c, 0xa8, 0x39, 0x6d, 0x9c, 0x6c, 0x9c, 0x76, 0x98, 0x59, 0xf6, 0x7f, 0x6f, 0x41, 0x67,
	0xaa, 0x78, 0xe1, 0x65, 0xba, 0x58, 0x1a, 0xbd, 0x54, 0x19, 0x26, 0x35, 0x99, 0x59, 0x22, 0x23,
	0x12, 0xcc, 0xd8, 0x62, 0x66, 0x49, 0xde, 0xc0, 0x4e, 0x94, 0xe7, 0x61, 0x1a, 0x65, 0xf3, 0x32,
	0x9a, 0x73, 0xba, 0x89, 0x9b, 0x75, 0xa3, 0x3c, 0x0f, 0x2a, 0x8a, 0x1c, 0x83, 0x81, 0xe1, 0x1d,
	0x2f, 0x94, 0x90, 0x19, 0xdd, 0xc2, 0x08, 0x88, 0xf2, 0xfc, 0xda, 0x32, 0xa6, 0xbf, 0xe8, 0x2e,
	0xd2, 0x51, 0x41, 0xb7, 0x51, 0xab, 0x10, 0xe9, 0x43, 0xfb, 0x46, 0x14, 0xfa, 0x36, 0x89, 0x96,
	0xb4, 0x89, 0x25, 0x6b, 0x4c, 0x28, 0xb4, 0x62, 0x59, 0x9a, 0x36, 0x69, 0x0b, 0x93, 0x3e, 0x41,
	0x53, 0x2e, 0xe1, 0x77, 0x22, 0xe6, 0xa1, 0x5e, 0xe6, 0x9c, 0xb6, 0x71, 0x64, 0xb0, 0xd4, 0x64,
	0x99, 0x73, 0xb2, 0x07, 0xdb, 0x7c, 0x11, 0x89, 0x94, 0x76, 0x30, 0xd1, 0x02, 0xf2, 0x35, 0xf4,
	0x70, 0x61, 0xfa, 0x14, 0x33, 0xc1, 0x13, 0x0a, 0x27, 0x1b, 0xa7, 0x6d, 0xb6, 0x8b, 0xec, 0x75,
	0x45, 0x9a, 0x5e, 0xe7, 0x3c, 0x4b, 0x78, 0x41, 0xbb, 0xd6, 0x4b, 0x8b, 0x4c, 0x55, 0xa1, 0x42,
	0x39, 0x9b, 0x89, 0x58, 0x44, 0x29, 0xdd, 0xc1, 0x5c, 0x10, 0x6a, 0x54, 0x31, 0xe4, 0x10, 0xda,
	0x42, 0x85, 0x85, 0xbc, 0x91, 0x9a, 0xee, 0xa2, 0xda, 0x12, 0x8a, 0x19, 0x48, 0x0e, 0xa0, 0x95,
	0x46, 0x4a, 0x87, 0x22, 0xa7, 0x3d, 0x6b, 0x80, 0x81, 0x7e, 0x4e, 0x5e, 0x01, 0xa0, 0x90, 0xca,
	0xb9, 0xc8, 0xe8, 0x33, 0xb4, 0xa0, 0x63, 0x98, 0xc0, 0x10, 0xa6, 0x26, 0x2a, 0x21, 0x8e, 0x4e,
	0x1d, 0xd4, 0x01, 0xa9, 0x2b, 0xc3, 0xe0, 0x0f, 0x8e, 0x63, 0xfa, 0x1c, 0x3b, 0x35, 0x4b, 0x63,
	0x69, 0x26, 0xe2, 0x8f, 0x59, 0xb4, 0xe0, 0x94, 0x60, 0xad, 0x1a, 0x93, 0x1e, 0x34, 0xa4, 0xa2,
	0x2f, 0x90, 0x6d, 0x48, 0x45, 0x8e, 0xa0, 0x23, 0x55, 0x98, 0xca, 0x38, 0x4a, 0x39, 0xdd, 0xb3,
	0xc1, 0x52, 0x05, 0x88, 0x8d, 0x89, 0xf9, 0xad, 0xcc, 0x38, 0x7d, 0x69, 0x4d, 0x44, 0x60, 0x4c,
	0xc4, 0xc5, 0x83, 0x89, 0xfb, 0xd6, 0x44, 0x64, 0x6b, 0x13, 0x8f, 0xa1, 0x9b, 0x17, 0x7c, 0x21,
	0xca, 0x45, 0xc8, 0xb3, 0x84, 0x1e, 0xd8, 0xc6, 0x2b, 0xca, 0xcb, 0x56, 0x03, 0xee, 0x73, 0x4a,
	0x57, 0x03, 0xee, 0x73, 0xf2, 0x15, 0xec, 0x7e, 0x0a, 0x48, 0xf9, 0x1d, 0x4f, 0xe9, 0x21, 0xce,
	0xb8, 0x53, 0x91, 0x81, 0xe1, 0xf0, 0xdc, 0xf3, 0xb8, 0xe0, 0x9a, 0xf6, 0xad, 0xad, 0x16, 0x99,
	0xde, 0x95, 0xc8, 0x62, 0x4e, 0x8f, 0x70, 0x5f, 0x0b, 0xcc, 0xb8, 0x4a, 0x9a, 0x5f, 0x15, 0x8a,
	0x84, 0x7e, 0x69, 0xc7, 0xb5, 0x84, 0x8f, 0x0d, 0x55, 0x22, 0x5a, 0xf7, 0xca, 0x9e, 0x61, 0x4b,
	0x0d, 0x8d, 0x79, 0xef, 0xe0, 0x59, 0x15, 0x50, 0x8f, 0xfe, 0x1a, 0x47, 0xef, 0x59, 0xfa, 0xf1,
	0x01, 0xaa, 0x2e, 0xe3, 0xf1, 0xca, 0x65, 0xec, 0x43, 0x5b, 0x8b, 0x05, 0xff, 0xd5, 0x78, 0x7a,
	0x82, 0x4a, 0x8d, 0x4d, 0xc3, 0x5a, 0x7e, 0xe4, 0x19, 0x7d, 0x63, 0xcd, 0x46, 0xd0, 0xbf, 0x80,
	0xe7, 0xe6, 0xae, 0x06, 0x72, 0x2e, 0x4b, 0xcd, 0xf8, 0x2f, 0x25, 0x57, 0xfa, 0xf1, 0x9d, 0xdd,
	0xb2, 0x77, 0xb6, 0x4e, 0x6e, 0x3c, 0x4e, 0x8e, 0x60, 0xc7, 0x24, 0x8f, 0xf2, 0xea, 0x8d, 0x38,
	0x85, 0x66, 0x81, 0x2b, 0x4c, 0xed, 0x9e, 0x3b, 0xf6, 0x4d, 0x39, 0x1b, 0x5c, 0x9e, 0xd9, 0x08,
	0x56, 0xe9, 0xe4, 0x1d, 0x6c, 0x95, 0x8a, 0x17, 0xb8, 0x5d, 0xf7, 0xfc, 0xc5, 0x43, 0x5c, 0xfd,
	0x70, 0x30, 0x0c, 0x78, 0xfb, 0x5b, 0x03, 0x60, 0x8c, 0xc3, 0x5d, 0xc9, 0x84, 0x93, 0x5d, 0xe8,
	0x8c, 0x27, 0xee, 0x64, 0x3a, 0x0e, 0x47, 0xef, 0x9d, 0x2f, 0x08, 0x85, 0xbd, 0x0a, 0xfa, 0xc3,
	0x6b, 0x37, 0xf0, 0x07, 0xe1, 0x0f, 0x2e, 0x73, 0x3f, 0x38, 0xc6, 0x21, 0xf2, 0x99, 0x32, 0x1d,
	0x0f, 0x1d, 0xbe, 0x8e, 0xf7, 0x07, 0xce, 0x6c, 0xcd, 0x4e, 0xde, 0x07, 0xd7, 0x0f, 0x9c, 0x39,
	0x39, 0x84, 0x97, 0x9f, 0x29, 0x63, 0xef, 0x8a, 0x79, 0x13, 0xe7, 0x76, 0x4d, 0xd2, 0x64, 0xf4,
	0xde, 0x1b, 0x3a, 0x82, 0xbc, 0x86, 0xc3, 0x4a, 0x99, 0x8e, 0x3d, 0x16, 0xba, 0x01, 0xf3, 0xdc,
	0xc1, 0xcf, 0xa1, 0xf7, 0x93, 0x3f, 0x9e, 0x38, 0x7f, 0x6e, 0x90, 0x7e, 0xbd, 0x29, 0xea, 0xc3,
	0xd1, 0x24, 0xfc, 0x7e, 0x34, 0x1d, 0x0e, 0x9c, 0xbf, 0x1e, 0x6b, 0xfe, 0x70, 0xe2, 0xb1, 0xa1,
	0x1b, 0x84, 0x1e, 0x63, 0x23, 0xe6, 0xfc, 0xbd, 0x49, 0x0e, 0xea, 0xf6, 0xa7, 0x43, 0xf7, 0xda,
	0xf5, 0x03, 0xf7, 0x32, 0xf0, 0x9c, 0x7f, 0x37, 0xcf, 0xff, 0x69, 0x40, 0x67, 0x70, 0x39, 0xe6,
	0x85, 0x79, 0xa1, 0xc8, 0x77, 0xf6, 0x05, 0xfe, 0xb1, 0xe4, 0xc5, 0x92, 0xac, 0x73, 0xb7, 0xbf,
	0xbf, 0x4a, 0xd6, 0xbf, 0xf0, 0x5b, 0xe8, 0x19, 0x3c, 0xcd, 0x93, 0x48, 0x73, 0x3f, 0x9b, 0xc9,
	0xf5, 0xe9, 0xff, 0xfb, 0xb3, 0xe4, 0xc2, 0x9e, 0x05, 0xc6, 0xe7, 0x42, 0x69, 0x5e, 0x3c, 0xad,
	0x6a, 0xd5, 0xaf, 0x7d, 0x91, 0x9e, 0x94, 0x79, 0x01, 0xf0, 0x70, 0x7e, 0xc9, 0xd1, 0x6a, 0xd4,
	0xca, 0xa9, 0x5e, 0xd3, 0xb3, 0x0b, 0x04, 0x2b, 0xdc, 0xeb, 0x22, 0x32, 0xb3, 0x3e, 0xdd, 0xaf,
	0x9b, 0x26, 0xd2, 0xdf, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xa2, 0xb2, 0xf1, 0x41, 0x07,
	0x00, 0x00,
}
