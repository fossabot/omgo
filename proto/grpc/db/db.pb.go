// Code generated by protoc-gen-go.
// source: db.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	DB
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto_common "github.com/master-g/omgo/proto/pb/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type DB struct {
}

func (m *DB) Reset()                    { *m = DB{} }
func (m *DB) String() string            { return proto1.CompactTextString(m) }
func (*DB) ProtoMessage()               {}
func (*DB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// user query key
type DB_UserKey struct {
	Usn   uint64 `protobuf:"fixed64,1,opt,name=usn" json:"usn,omitempty"`
	Uid   uint64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *DB_UserKey) Reset()                    { *m = DB_UserKey{} }
func (m *DB_UserKey) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserKey) ProtoMessage()               {}
func (*DB_UserKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *DB_UserKey) GetUsn() uint64 {
	if m != nil {
		return m.Usn
	}
	return 0
}

func (m *DB_UserKey) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DB_UserKey) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// user extra information
type DB_UserExtraInfo struct {
	Secret []byte `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Token  []byte `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *DB_UserExtraInfo) Reset()                    { *m = DB_UserExtraInfo{} }
func (m *DB_UserExtraInfo) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserExtraInfo) ProtoMessage()               {}
func (*DB_UserExtraInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *DB_UserExtraInfo) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *DB_UserExtraInfo) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type DB_UserQueryResponse struct {
	Result *proto_common.RspHeader     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Info   *proto_common.UserBasicInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *DB_UserQueryResponse) Reset()                    { *m = DB_UserQueryResponse{} }
func (m *DB_UserQueryResponse) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserQueryResponse) ProtoMessage()               {}
func (*DB_UserQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *DB_UserQueryResponse) GetResult() *proto_common.RspHeader {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DB_UserQueryResponse) GetInfo() *proto_common.UserBasicInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type DB_UserRegisterRequest struct {
	Result *proto_common.RspHeader     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Info   *proto_common.UserBasicInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Secret []byte                      `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *DB_UserRegisterRequest) Reset()                    { *m = DB_UserRegisterRequest{} }
func (m *DB_UserRegisterRequest) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserRegisterRequest) ProtoMessage()               {}
func (*DB_UserRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *DB_UserRegisterRequest) GetResult() *proto_common.RspHeader {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DB_UserRegisterRequest) GetInfo() *proto_common.UserBasicInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DB_UserRegisterRequest) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

type DB_UserRegisterResponse struct {
	Result *proto_common.RspHeader     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Info   *proto_common.UserBasicInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Token  []byte                      `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *DB_UserRegisterResponse) Reset()                    { *m = DB_UserRegisterResponse{} }
func (m *DB_UserRegisterResponse) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserRegisterResponse) ProtoMessage()               {}
func (*DB_UserRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 4} }

func (m *DB_UserRegisterResponse) GetResult() *proto_common.RspHeader {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DB_UserRegisterResponse) GetInfo() *proto_common.UserBasicInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DB_UserRegisterResponse) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

type DB_UserLoginRequest struct {
	Info   *proto_common.UserBasicInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Secret []byte                      `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *DB_UserLoginRequest) Reset()                    { *m = DB_UserLoginRequest{} }
func (m *DB_UserLoginRequest) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserLoginRequest) ProtoMessage()               {}
func (*DB_UserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 5} }

func (m *DB_UserLoginRequest) GetInfo() *proto_common.UserBasicInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DB_UserLoginRequest) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

type DB_UserLoginResponse struct {
	Result *proto_common.RspHeader     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Info   *proto_common.UserBasicInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Token  []byte                      `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *DB_UserLoginResponse) Reset()                    { *m = DB_UserLoginResponse{} }
func (m *DB_UserLoginResponse) String() string            { return proto1.CompactTextString(m) }
func (*DB_UserLoginResponse) ProtoMessage()               {}
func (*DB_UserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 6} }

func (m *DB_UserLoginResponse) GetResult() *proto_common.RspHeader {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DB_UserLoginResponse) GetInfo() *proto_common.UserBasicInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DB_UserLoginResponse) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto1.RegisterType((*DB)(nil), "proto.DB")
	proto1.RegisterType((*DB_UserKey)(nil), "proto.DB.UserKey")
	proto1.RegisterType((*DB_UserExtraInfo)(nil), "proto.DB.UserExtraInfo")
	proto1.RegisterType((*DB_UserQueryResponse)(nil), "proto.DB.UserQueryResponse")
	proto1.RegisterType((*DB_UserRegisterRequest)(nil), "proto.DB.UserRegisterRequest")
	proto1.RegisterType((*DB_UserRegisterResponse)(nil), "proto.DB.UserRegisterResponse")
	proto1.RegisterType((*DB_UserLoginRequest)(nil), "proto.DB.UserLoginRequest")
	proto1.RegisterType((*DB_UserLoginResponse)(nil), "proto.DB.UserLoginResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DBService service

type DBServiceClient interface {
	// query user info
	UserQuery(ctx context.Context, in *DB_UserKey, opts ...grpc.CallOption) (*DB_UserQueryResponse, error)
	// update user info
	UserUpdateInfo(ctx context.Context, in *proto_common.UserBasicInfo, opts ...grpc.CallOption) (*proto_common.RspHeader, error)
	// register
	UserRegister(ctx context.Context, in *DB_UserRegisterRequest, opts ...grpc.CallOption) (*DB_UserRegisterResponse, error)
	// login
	UserLogin(ctx context.Context, in *DB_UserLoginRequest, opts ...grpc.CallOption) (*DB_UserLoginResponse, error)
	// logout
	UserLogout(ctx context.Context, in *DB_UserKey, opts ...grpc.CallOption) (*proto_common.RspHeader, error)
}

type dBServiceClient struct {
	cc *grpc.ClientConn
}

func NewDBServiceClient(cc *grpc.ClientConn) DBServiceClient {
	return &dBServiceClient{cc}
}

func (c *dBServiceClient) UserQuery(ctx context.Context, in *DB_UserKey, opts ...grpc.CallOption) (*DB_UserQueryResponse, error) {
	out := new(DB_UserQueryResponse)
	err := grpc.Invoke(ctx, "/proto.DBService/UserQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserUpdateInfo(ctx context.Context, in *proto_common.UserBasicInfo, opts ...grpc.CallOption) (*proto_common.RspHeader, error) {
	out := new(proto_common.RspHeader)
	err := grpc.Invoke(ctx, "/proto.DBService/UserUpdateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserRegister(ctx context.Context, in *DB_UserRegisterRequest, opts ...grpc.CallOption) (*DB_UserRegisterResponse, error) {
	out := new(DB_UserRegisterResponse)
	err := grpc.Invoke(ctx, "/proto.DBService/UserRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserLogin(ctx context.Context, in *DB_UserLoginRequest, opts ...grpc.CallOption) (*DB_UserLoginResponse, error) {
	out := new(DB_UserLoginResponse)
	err := grpc.Invoke(ctx, "/proto.DBService/UserLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UserLogout(ctx context.Context, in *DB_UserKey, opts ...grpc.CallOption) (*proto_common.RspHeader, error) {
	out := new(proto_common.RspHeader)
	err := grpc.Invoke(ctx, "/proto.DBService/UserLogout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBService service

type DBServiceServer interface {
	// query user info
	UserQuery(context.Context, *DB_UserKey) (*DB_UserQueryResponse, error)
	// update user info
	UserUpdateInfo(context.Context, *proto_common.UserBasicInfo) (*proto_common.RspHeader, error)
	// register
	UserRegister(context.Context, *DB_UserRegisterRequest) (*DB_UserRegisterResponse, error)
	// login
	UserLogin(context.Context, *DB_UserLoginRequest) (*DB_UserLoginResponse, error)
	// logout
	UserLogout(context.Context, *DB_UserKey) (*proto_common.RspHeader, error)
}

func RegisterDBServiceServer(s *grpc.Server, srv DBServiceServer) {
	s.RegisterService(&_DBService_serviceDesc, srv)
}

func _DBService_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserQuery(ctx, req.(*DB_UserKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_common.UserBasicInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserUpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserUpdateInfo(ctx, req.(*proto_common.UserBasicInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserRegister(ctx, req.(*DB_UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserLogin(ctx, req.(*DB_UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DB_UserKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DBService/UserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UserLogout(ctx, req.(*DB_UserKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DBService",
	HandlerType: (*DBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserQuery",
			Handler:    _DBService_UserQuery_Handler,
		},
		{
			MethodName: "UserUpdateInfo",
			Handler:    _DBService_UserUpdateInfo_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _DBService_UserRegister_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _DBService_UserLogin_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _DBService_UserLogout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

func init() { proto1.RegisterFile("db.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x95, 0x93, 0xdd, 0x40, 0x67, 0x03, 0xda, 0x35, 0x15, 0x54, 0xae, 0x40, 0x15, 0xa7, 0x9e,
	0x5a, 0xa9, 0x5c, 0x90, 0x10, 0x97, 0x10, 0x10, 0x08, 0x38, 0x60, 0xd4, 0x13, 0xa7, 0x34, 0x99,
	0x56, 0x11, 0x6d, 0x1c, 0x6c, 0x07, 0xd1, 0xdf, 0x80, 0x80, 0x9f, 0xc8, 0x5f, 0x41, 0xfe, 0x10,
	0x8d, 0x2b, 0x8a, 0xc4, 0x01, 0x38, 0xd9, 0xf3, 0x3c, 0x7e, 0x9e, 0xf7, 0x66, 0x0c, 0xd7, 0xab,
	0xd5, 0xac, 0x95, 0x42, 0x0b, 0x7a, 0x6e, 0x17, 0x96, 0x96, 0x62, 0xb7, 0x13, 0x8d, 0x03, 0xef,
	0x7f, 0x49, 0x20, 0xca, 0x33, 0xf6, 0x04, 0xae, 0x2d, 0x15, 0xca, 0x97, 0xb8, 0xa7, 0x97, 0x10,
	0x77, 0xaa, 0x19, 0x91, 0x09, 0x99, 0x26, 0xdc, 0x6c, 0x2d, 0x52, 0x57, 0xa3, 0x68, 0x42, 0xa6,
	0x67, 0xdc, 0x6c, 0xe9, 0x10, 0xce, 0x71, 0x57, 0xd4, 0xdb, 0x51, 0x3c, 0x21, 0xd3, 0x01, 0x77,
	0x01, 0x7b, 0x0c, 0x37, 0x0c, 0xc9, 0xd3, 0x4f, 0x5a, 0x16, 0x2f, 0x9a, 0xb5, 0xa0, 0xb7, 0x21,
	0x51, 0x58, 0x4a, 0xd4, 0x96, 0x2d, 0xe5, 0x3e, 0x32, 0xd7, 0xb5, 0x78, 0x8f, 0x8d, 0xa5, 0x4c,
	0xb9, 0x0b, 0x58, 0x07, 0x57, 0xe6, 0xfa, 0x9b, 0x0e, 0xe5, 0x9e, 0xa3, 0x6a, 0x45, 0xa3, 0x90,
	0xce, 0x21, 0x91, 0xa8, 0xba, 0xad, 0xa3, 0xb8, 0x58, 0xdc, 0x71, 0x75, 0xcf, 0xbc, 0x08, 0xae,
	0xda, 0xe7, 0x58, 0x54, 0x28, 0xb9, 0x4f, 0xa3, 0x73, 0x38, 0xab, 0x9b, 0xb5, 0xb0, 0xd4, 0x17,
	0x8b, 0x71, 0x98, 0x6e, 0xf8, 0xb3, 0x42, 0xd5, 0xa5, 0x29, 0x8f, 0xdb, 0x44, 0xf6, 0x8d, 0xc0,
	0x2d, 0x83, 0x73, 0xdc, 0xd4, 0x4a, 0x9b, 0xf5, 0x43, 0x87, 0x4a, 0xff, 0xfd, 0x97, 0x7b, 0xf6,
	0xc4, 0x7d, 0x7b, 0xd8, 0x57, 0x02, 0xc3, 0xb0, 0xa2, 0x7f, 0x65, 0xc6, 0xa1, 0x33, 0x71, 0xbf,
	0x33, 0xef, 0xe0, 0xd2, 0x24, 0xbf, 0x12, 0x9b, 0xba, 0x39, 0xd8, 0xe3, 0xa8, 0xc9, 0x9f, 0xab,
	0x8d, 0x02, 0xb5, 0x9f, 0x89, 0xeb, 0xbb, 0x67, 0xff, 0xbf, 0x52, 0x17, 0xdf, 0x23, 0x18, 0xe4,
	0xd9, 0x5b, 0x94, 0x1f, 0xeb, 0x12, 0xe9, 0x23, 0x18, 0xfc, 0x1c, 0x49, 0x7a, 0xe5, 0x39, 0xf3,
	0x6c, 0xe6, 0xff, 0x0a, 0x1b, 0x87, 0x50, 0x38, 0xba, 0xcf, 0xe0, 0xa6, 0x01, 0x97, 0x6d, 0x55,
	0x68, 0xb4, 0xff, 0xe1, 0x77, 0x55, 0xb1, 0x53, 0x0a, 0xe9, 0x6b, 0x48, 0xfb, 0xd3, 0x40, 0xef,
	0x86, 0x8f, 0x1e, 0xcd, 0x2d, 0xbb, 0x77, 0xea, 0xd8, 0x97, 0x95, 0x3b, 0x4d, 0xd6, 0x6e, 0xca,
	0xc2, 0xe4, 0x7e, 0x87, 0x8f, 0xc5, 0x85, 0xfd, 0x79, 0x08, 0xe0, 0x41, 0xd1, 0xe9, 0x5f, 0x59,
	0x73, 0x4a, 0xce, 0x2a, 0xb1, 0xf8, 0x83, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x78, 0x15, 0xeb,
	0x89, 0x99, 0x04, 0x00, 0x00,
}
