syntax = "proto3";
package proto.room;
import "common.proto";
option go_package = "github.com/master-g/omgo/proto/pb/room";

enum RoomType {
    ROOM_RESERVED = 0;
    ROOM_NORMAL   = 1;
    ROOM_PRIVATE  = 2;
}

enum BillingMode {
    BILLING_RESERVED = 0;
    BILLING_TIME     = 1;
    BILLING_ROUND    = 2;
}

enum GameMode {
    GAME_MODE_RESERVED = 0;
    GAME_MODE_RACE     = 1; /// Qiang dizhu mode
    GAME_MODE_CALL     = 2; /// Jiao fen mode
}

enum EnterRoomResult {
    ENTER_ROOM_OK                  = 0;
    ENTER_ROOM_INSUFFICIENT_CREDIT = 1;
    ENTER_ROOM_WRONG_PASSWORD      = 2;
    ENTER_ROOM_NOT_EXIST           = 3;
    ENTER_ROOM_FULL                = 4;
    ENTER_ROOM_FAIL_NO_OBSERVE     = 5;
}

enum CreateRoomResult {
    CREATE_ROOM_OK                = 0;
    CREATE_ROOM_INVALID_PARAM     = 1; // password, title, desc etc
    CREATE_ROOM_INSUFFICIENT_CARD = 2;
    CREATE_ROOM_ALREADY_EXIST     = 3; // user has a unfinished room
}

enum ExitRoomOption {
    EXIT_ROOM_DEFAULT = 0;
    EXIT_ROOM_DISMISS = 1; // Only available for room owner
}

enum ExitRoomResult {
    EXIT_ROOM_OK      = 0;
    EXIT_ROOM_INVALID = 1;
}

message RoomInfo {
    fixed64     id             = 1; // room id
    fixed64     owner          = 2; // room owner's usn
    RoomType    room_type      = 3; //
    GameMode    game_mode      = 4; //
    BillingMode bill_mode      = 5;
    string      title          = 6;  // room title
    string      desc           = 7;  // room description
    fixed64     since          = 8;  // create time
    bool        observable     = 9;  // is observation enabled
    int32       boom_limit     = 10; // how many bombs can a game have
    int32       total_duration = 11; // BILLING_TIME
    int32       left_duration  = 12;
    int32       total_rounds   = 13; // BILLING_ROUND
    int32       left_rounds    = 14; //
    int32       call_time      = 15; // seconds, how long can players call for landlord
    int32       hand_time      = 16; // seconds, how long can a player think before plays a hand
    repeated fixed64 players   = 17; // player usn list
    bool             secure    = 18; // is this room has secure information
    common.Location  location  = 19; /// Room create location information
    // 低分, 时长
}

message C2SEnterRoomReq {
    RoomType type     = 1;
    fixed64  room_id  = 2;
    string   password = 3;
}

message S2CEnterRoomRsp {
    common.RspHeader header = 1;
}

message C2SCreateRoomReq {
    int32           card_num   = 1;
    string          password   = 2;
    string          title      = 3;
    string          desc       = 4;
    bool            observable = 5;
    int32           boom_limit = 6;
    bool            secure     = 7;
    common.Location location   = 8;
}

message S2CCreateRoomRsp {
    common.RspHeader header = 1;
}

message C2SExitRoomReq {
    ExitRoomOption option = 1;
}

message S2CExitRoomRsp {
  RspHeader header = 1; // Status code see ExitRoomResult
}
