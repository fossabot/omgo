// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	RspHeader
	UserBasicInfo
	C2SGetSeedReq
	S2CGetSeedRsp
	C2SLoginReq
	S2CLoginRsp
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// commands
// S -> C : even
// C -> S : odd
type Cmd int32

const (
	Cmd_RESERVED       Cmd = 0
	Cmd_HEART_BEAT_REQ Cmd = 1
	Cmd_HEART_BEAT_RSP Cmd = 2
	Cmd_LOGIN_REQ      Cmd = 17
	Cmd_LOGIN_RSP      Cmd = 18
	Cmd_GET_SEED_REQ   Cmd = 49
	Cmd_GET_SEED_RSP   Cmd = 50
	Cmd_PING_REQ       Cmd = 4097
	Cmd_PING_RSP       Cmd = 4098
	Cmd_CMD_COMMON_END Cmd = 65536
)

var Cmd_name = map[int32]string{
	0:     "RESERVED",
	1:     "HEART_BEAT_REQ",
	2:     "HEART_BEAT_RSP",
	17:    "LOGIN_REQ",
	18:    "LOGIN_RSP",
	49:    "GET_SEED_REQ",
	50:    "GET_SEED_RSP",
	4097:  "PING_REQ",
	4098:  "PING_RSP",
	65536: "CMD_COMMON_END",
}
var Cmd_value = map[string]int32{
	"RESERVED":       0,
	"HEART_BEAT_REQ": 1,
	"HEART_BEAT_RSP": 2,
	"LOGIN_REQ":      17,
	"LOGIN_RSP":      18,
	"GET_SEED_REQ":   49,
	"GET_SEED_RSP":   50,
	"PING_REQ":       4097,
	"PING_RSP":       4098,
	"CMD_COMMON_END": 65536,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResultCode int32

const (
	ResultCode_RESULT_OK             ResultCode = 0
	ResultCode_RESULT_TIMEOUT        ResultCode = 1
	ResultCode_RESULT_UNAUTH         ResultCode = 2
	ResultCode_RESULT_UNKNOWN_CMD    ResultCode = 3
	ResultCode_RESULT_INVALID        ResultCode = 4
	ResultCode_RESULT_INTERNAL_ERROR ResultCode = 5
)

var ResultCode_name = map[int32]string{
	0: "RESULT_OK",
	1: "RESULT_TIMEOUT",
	2: "RESULT_UNAUTH",
	3: "RESULT_UNKNOWN_CMD",
	4: "RESULT_INVALID",
	5: "RESULT_INTERNAL_ERROR",
}
var ResultCode_value = map[string]int32{
	"RESULT_OK":             0,
	"RESULT_TIMEOUT":        1,
	"RESULT_UNAUTH":         2,
	"RESULT_UNKNOWN_CMD":    3,
	"RESULT_INVALID":        4,
	"RESULT_INTERNAL_ERROR": 5,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}
func (ResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Gender int32

const (
	Gender_GENDER_UNKNOWN Gender = 0
	Gender_GENDER_FEMALE  Gender = 1
	Gender_GENDER_MALE    Gender = 2
)

var Gender_name = map[int32]string{
	0: "GENDER_UNKNOWN",
	1: "GENDER_FEMALE",
	2: "GENDER_MALE",
}
var Gender_value = map[string]int32{
	"GENDER_UNKNOWN": 0,
	"GENDER_FEMALE":  1,
	"GENDER_MALE":    2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RspHeader struct {
	Status    ResultCode `protobuf:"varint,1,opt,name=status,enum=proto.common.ResultCode" json:"status"`
	Timestamp uint64     `protobuf:"fixed64,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Msg       string     `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *RspHeader) Reset()                    { *m = RspHeader{} }
func (m *RspHeader) String() string            { return proto.CompactTextString(m) }
func (*RspHeader) ProtoMessage()               {}
func (*RspHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RspHeader) GetStatus() ResultCode {
	if m != nil {
		return m.Status
	}
	return ResultCode_RESULT_OK
}

func (m *RspHeader) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RspHeader) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type UserBasicInfo struct {
	Usn       uint64 `protobuf:"fixed64,1,opt,name=usn" json:"usn,omitempty"`
	Uid       uint64 `protobuf:"varint,2,opt,name=uid" json:"uid"`
	Birthday  uint64 `protobuf:"fixed64,3,opt,name=birthday" json:"birthday,omitempty"`
	Gender    Gender `protobuf:"varint,4,opt,name=gender,enum=proto.common.Gender" json:"gender"`
	Nickname  string `protobuf:"bytes,5,opt,name=nickname" json:"nickname,omitempty"`
	Email     string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	Avatar    string `protobuf:"bytes,7,opt,name=avatar" json:"avatar,omitempty"`
	Country   string `protobuf:"bytes,8,opt,name=country" json:"country,omitempty"`
	Since     uint64 `protobuf:"fixed64,9,opt,name=since" json:"since,omitempty"`
	LastLogin uint64 `protobuf:"fixed64,10,opt,name=last_login,json=lastLogin" json:"last_login,omitempty"`
}

func (m *UserBasicInfo) Reset()                    { *m = UserBasicInfo{} }
func (m *UserBasicInfo) String() string            { return proto.CompactTextString(m) }
func (*UserBasicInfo) ProtoMessage()               {}
func (*UserBasicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserBasicInfo) GetUsn() uint64 {
	if m != nil {
		return m.Usn
	}
	return 0
}

func (m *UserBasicInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserBasicInfo) GetBirthday() uint64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UserBasicInfo) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_GENDER_UNKNOWN
}

func (m *UserBasicInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserBasicInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserBasicInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserBasicInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserBasicInfo) GetSince() uint64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *UserBasicInfo) GetLastLogin() uint64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

type C2SGetSeedReq struct {
	SendSeed []byte `protobuf:"bytes,1,opt,name=send_seed,json=sendSeed,proto3" json:"send_seed,omitempty"`
	RecvSeed []byte `protobuf:"bytes,2,opt,name=recv_seed,json=recvSeed,proto3" json:"recv_seed,omitempty"`
}

func (m *C2SGetSeedReq) Reset()                    { *m = C2SGetSeedReq{} }
func (m *C2SGetSeedReq) String() string            { return proto.CompactTextString(m) }
func (*C2SGetSeedReq) ProtoMessage()               {}
func (*C2SGetSeedReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *C2SGetSeedReq) GetSendSeed() []byte {
	if m != nil {
		return m.SendSeed
	}
	return nil
}

func (m *C2SGetSeedReq) GetRecvSeed() []byte {
	if m != nil {
		return m.RecvSeed
	}
	return nil
}

type S2CGetSeedRsp struct {
	Header   *RspHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	SendSeed []byte     `protobuf:"bytes,2,opt,name=send_seed,json=sendSeed,proto3" json:"send_seed,omitempty"`
	RecvSeed []byte     `protobuf:"bytes,3,opt,name=recv_seed,json=recvSeed,proto3" json:"recv_seed,omitempty"`
}

func (m *S2CGetSeedRsp) Reset()                    { *m = S2CGetSeedRsp{} }
func (m *S2CGetSeedRsp) String() string            { return proto.CompactTextString(m) }
func (*S2CGetSeedRsp) ProtoMessage()               {}
func (*S2CGetSeedRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *S2CGetSeedRsp) GetHeader() *RspHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *S2CGetSeedRsp) GetSendSeed() []byte {
	if m != nil {
		return m.SendSeed
	}
	return nil
}

func (m *S2CGetSeedRsp) GetRecvSeed() []byte {
	if m != nil {
		return m.RecvSeed
	}
	return nil
}

type C2SLoginReq struct {
	Timestamp uint64 `protobuf:"fixed64,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *C2SLoginReq) Reset()                    { *m = C2SLoginReq{} }
func (m *C2SLoginReq) String() string            { return proto.CompactTextString(m) }
func (*C2SLoginReq) ProtoMessage()               {}
func (*C2SLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *C2SLoginReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type S2CLoginRsp struct {
	Header   *RspHeader     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	UserInfo *UserBasicInfo `protobuf:"bytes,2,opt,name=user_info,json=userInfo" json:"user_info,omitempty"`
	Token    string         `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *S2CLoginRsp) Reset()                    { *m = S2CLoginRsp{} }
func (m *S2CLoginRsp) String() string            { return proto.CompactTextString(m) }
func (*S2CLoginRsp) ProtoMessage()               {}
func (*S2CLoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *S2CLoginRsp) GetHeader() *RspHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *S2CLoginRsp) GetUserInfo() *UserBasicInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *S2CLoginRsp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*RspHeader)(nil), "proto.common.RspHeader")
	proto.RegisterType((*UserBasicInfo)(nil), "proto.common.UserBasicInfo")
	proto.RegisterType((*C2SGetSeedReq)(nil), "proto.common.C2SGetSeedReq")
	proto.RegisterType((*S2CGetSeedRsp)(nil), "proto.common.S2CGetSeedRsp")
	proto.RegisterType((*C2SLoginReq)(nil), "proto.common.C2SLoginReq")
	proto.RegisterType((*S2CLoginRsp)(nil), "proto.common.S2CLoginRsp")
	proto.RegisterEnum("proto.common.Cmd", Cmd_name, Cmd_value)
	proto.RegisterEnum("proto.common.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterEnum("proto.common.Gender", Gender_name, Gender_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 699 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6f, 0xda, 0x48,
	0x14, 0xc7, 0x63, 0x7e, 0x38, 0xf0, 0x80, 0xec, 0x64, 0xc4, 0x66, 0xbd, 0x9b, 0x5d, 0x09, 0x71,
	0x42, 0xec, 0x2e, 0xec, 0xba, 0x97, 0x1e, 0x4b, 0xcc, 0x94, 0xa0, 0x80, 0xa1, 0x63, 0x93, 0x4a,
	0xbd, 0x58, 0x06, 0x4f, 0x88, 0x15, 0x6c, 0x53, 0x8f, 0x89, 0x94, 0x9e, 0xd2, 0xde, 0x7a, 0xe9,
	0xb1, 0xff, 0x47, 0xff, 0xc3, 0x6a, 0xc6, 0x86, 0x04, 0x0e, 0x3d, 0xf4, 0xe4, 0xf9, 0x7e, 0xde,
	0x77, 0xde, 0x7b, 0xf6, 0x7b, 0x86, 0xea, 0x22, 0x0a, 0x82, 0x28, 0xec, 0xac, 0xe3, 0x28, 0x89,
	0x70, 0x55, 0x3e, 0x3a, 0x29, 0x6b, 0x06, 0x50, 0xa6, 0x7c, 0x7d, 0xc9, 0x5c, 0x8f, 0xc5, 0xf8,
	0x3f, 0x50, 0x79, 0xe2, 0x26, 0x1b, 0xae, 0x29, 0x0d, 0xa5, 0x75, 0xa2, 0x6b, 0x9d, 0xe7, 0xde,
	0x0e, 0x65, 0x7c, 0xb3, 0x4a, 0x8c, 0xc8, 0x63, 0x34, 0xf3, 0xe1, 0x3f, 0xa1, 0x9c, 0xf8, 0x01,
	0xe3, 0x89, 0x1b, 0xac, 0xb5, 0x5c, 0x43, 0x69, 0xa9, 0xf4, 0x09, 0x60, 0x04, 0xf9, 0x80, 0x2f,
	0xb5, 0x7c, 0x43, 0x69, 0x95, 0xa9, 0x38, 0x36, 0xbf, 0xe6, 0xa0, 0x36, 0xe3, 0x2c, 0xbe, 0x70,
	0xb9, 0xbf, 0x18, 0x86, 0x37, 0x91, 0xf0, 0x6c, 0x78, 0x28, 0x0b, 0xaa, 0x54, 0x1c, 0x25, 0xf1,
	0x3d, 0x99, 0xad, 0x40, 0xc5, 0x11, 0xff, 0x01, 0xa5, 0xb9, 0x1f, 0x27, 0xb7, 0x9e, 0xfb, 0x20,
	0x93, 0xa9, 0x74, 0xa7, 0xf1, 0x3f, 0xa0, 0x2e, 0x59, 0xe8, 0xb1, 0x58, 0x2b, 0xc8, 0x9e, 0xeb,
	0xfb, 0x3d, 0x0f, 0x64, 0x8c, 0x66, 0x1e, 0x91, 0x29, 0xf4, 0x17, 0x77, 0xa1, 0x1b, 0x30, 0xad,
	0x28, 0xdb, 0xda, 0x69, 0x5c, 0x87, 0x22, 0x0b, 0x5c, 0x7f, 0xa5, 0xa9, 0x32, 0x90, 0x0a, 0x7c,
	0x06, 0xaa, 0x7b, 0xef, 0x26, 0x6e, 0xac, 0x1d, 0x4b, 0x9c, 0x29, 0xac, 0xc1, 0xf1, 0x22, 0xda,
	0x84, 0x49, 0xfc, 0xa0, 0x95, 0x64, 0x60, 0x2b, 0x45, 0x1e, 0xee, 0x87, 0x0b, 0xa6, 0x95, 0x65,
	0xab, 0xa9, 0xc0, 0x7f, 0x01, 0xac, 0x5c, 0x9e, 0x38, 0xab, 0x68, 0xe9, 0x87, 0x1a, 0xa4, 0x9f,
	0x4a, 0x90, 0x91, 0x00, 0xcd, 0x21, 0xd4, 0x0c, 0xdd, 0x1a, 0xb0, 0xc4, 0x62, 0xcc, 0xa3, 0xec,
	0x3d, 0x3e, 0x87, 0x32, 0x67, 0xa1, 0xe7, 0x70, 0xc6, 0x3c, 0xf9, 0x75, 0xaa, 0xb4, 0x24, 0x80,
	0x88, 0x8b, 0x60, 0xcc, 0x16, 0xf7, 0x69, 0x30, 0x97, 0x06, 0x05, 0x10, 0xc1, 0xe6, 0x07, 0xa8,
	0x59, 0xba, 0xb1, 0x4d, 0xc5, 0xd7, 0xb8, 0x0b, 0xea, 0xad, 0x1c, 0xb0, 0xcc, 0x53, 0xd1, 0x7f,
	0x3b, 0x18, 0xeb, 0x76, 0xfe, 0x34, 0xb3, 0xed, 0xd7, 0xce, 0xfd, 0xa8, 0x76, 0xfe, 0xa0, 0xf6,
	0xdf, 0x50, 0x31, 0x74, 0x4b, 0xbe, 0x92, 0x78, 0x89, 0xbd, 0xf5, 0x50, 0x0e, 0xd6, 0xa3, 0xf9,
	0x45, 0x81, 0x8a, 0xa5, 0x1b, 0xa9, 0xfb, 0x67, 0xfa, 0x7c, 0x09, 0xe5, 0x0d, 0x67, 0xb1, 0xe3,
	0x87, 0x37, 0x91, 0xec, 0xb3, 0xa2, 0x9f, 0xef, 0xdf, 0xd9, 0xdb, 0x35, 0x5a, 0x12, 0x6e, 0xb9,
	0x75, 0x75, 0x28, 0x26, 0xd1, 0x1d, 0x0b, 0xb3, 0xdd, 0x4c, 0x45, 0xfb, 0x9b, 0x02, 0x79, 0x23,
	0xf0, 0x70, 0x15, 0x4a, 0x94, 0x58, 0x84, 0x5e, 0x93, 0x3e, 0x3a, 0xc2, 0x18, 0x4e, 0x2e, 0x49,
	0x8f, 0xda, 0xce, 0x05, 0xe9, 0xd9, 0x0e, 0x25, 0x6f, 0x90, 0x72, 0xc8, 0xac, 0x29, 0xca, 0xe1,
	0x1a, 0x94, 0x47, 0x93, 0xc1, 0xd0, 0x94, 0x96, 0xd3, 0x67, 0xd2, 0x9a, 0x22, 0x8c, 0x11, 0x54,
	0x07, 0xc4, 0x76, 0x2c, 0x42, 0xfa, 0xd2, 0xf0, 0xff, 0x3e, 0xb1, 0xa6, 0x48, 0xc7, 0x35, 0x28,
	0x4d, 0x87, 0xe6, 0x40, 0xc6, 0x3f, 0x36, 0x9e, 0xa4, 0x35, 0x45, 0x9f, 0x1a, 0xb8, 0x0e, 0x27,
	0xc6, 0xb8, 0xef, 0x18, 0x93, 0xf1, 0x78, 0x62, 0x3a, 0xc4, 0xec, 0xa3, 0xc7, 0xc7, 0x42, 0xfb,
	0xb3, 0x02, 0xf0, 0xf4, 0x63, 0x8a, 0xaa, 0x94, 0x58, 0xb3, 0x91, 0xed, 0x4c, 0xae, 0xd2, 0xde,
	0x33, 0x69, 0x0f, 0xc7, 0x64, 0x32, 0xb3, 0x91, 0x82, 0x4f, 0xa1, 0x96, 0xb1, 0x99, 0xd9, 0x9b,
	0xd9, 0x97, 0x28, 0x87, 0xcf, 0x00, 0xef, 0xd0, 0x95, 0x39, 0x79, 0x6b, 0x3a, 0xc6, 0xb8, 0x8f,
	0xf2, 0xcf, 0xae, 0x0f, 0xcd, 0xeb, 0xde, 0x68, 0xd8, 0x47, 0x05, 0xfc, 0x3b, 0xfc, 0xba, 0x63,
	0x36, 0xa1, 0x66, 0x6f, 0xe4, 0x10, 0x4a, 0x27, 0x14, 0x15, 0xdb, 0xaf, 0x40, 0x4d, 0xff, 0x37,
	0x71, 0x71, 0x40, 0xcc, 0x3e, 0xa1, 0xdb, 0x84, 0xe8, 0x48, 0xd4, 0xcd, 0xd8, 0x6b, 0x32, 0xee,
	0x8d, 0x08, 0x52, 0xf0, 0x2f, 0x50, 0xc9, 0x90, 0x04, 0xb9, 0x8b, 0xf6, 0xbb, 0xd6, 0xd2, 0x4f,
	0x6e, 0x37, 0x73, 0x31, 0xc0, 0x6e, 0xe0, 0xf2, 0x84, 0xc5, 0xff, 0x2e, 0xbb, 0x51, 0xb0, 0x8c,
	0xba, 0x72, 0xb0, 0xdd, 0xf5, 0xbc, 0x9b, 0xce, 0x76, 0xae, 0x4a, 0xf0, 0xe2, 0x7b, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xaf, 0xb0, 0xf6, 0x33, 0xdf, 0x04, 0x00, 0x00,
}
